install.packages("styler")
styler:::set_style_transformers()
styler:::set_style_transformers()
library(tidyverse)
library("tidyverse")
install.packages("tidyverse)
install.packages("tidyverse")
library("tidyverse")
install.packages("tidyverse")
library("tidyverse")
library("tidyverse")
ggplot(mpg, aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth(aes(linetype = drv))
ggplot(mpg, aes(x = displ, y = hwy, color = drv)) +
geom_smooth(aes(linetype = drv))
ggplot(mpg, aes(x = displ, y = hwy, color = drv, linetype = drv)) +
geom_smooth()
ggplot(mpg, aes(x = displ, y = hwy, color = drv)) +
geom_smooth(aes(linetype = drv))
ggplot(mpg, aes(x = displ, y = hwy, color = drv)) +
geom_smooth(aes(linetype = drv))
install.packages("tidyverse")
library("tidyverse")
install.packages("languageserver")
install.packages("gptchatteR")
install.packages("installr")
updateR()
library(installr)
updateR()
install.packages("gptchatteR")
#required packages
install.packages("tidyverse")
install.packages("jsonlite")
install.packages("writexl")
library(tidyverse)
library(jsonlite)
library(httr2)
library(stringr)
library(writexl)
#may need to change the file path if you downloaded this code
file_path <- file.path("C:/Users/aidan/Documents/Data Final Project")
setwd(file_path)
data_list = list.files("data", pattern = "\\.csv$", full.names = T)
#turns file names (country) into column along side data
read_country_file <- function(file_path){
df <- read_csv(file_path) |>
mutate(
source = str_extract(
string = file_path,
pattern = "(?<=data/).*(?=\\.csv$)")
)
return(df)
}
countries <- purrr::map(.x = data_list, .f = read_country_file)
var_names <- purrr::map(.x = countries, .f = names)
shortest_country <- var_names[1]
for (x in var_names){
if (length(x) < length(shortest_country)){
shortest_country = x
}
}
shared_columns <- purrr::map2(var_names, shortest_country, intersect)
shared_columns <- Reduce(intersect, shared_columns)
clean_country_file <- function(df){
df_clean <- df |>
select(all_of(shared_columns))
return(df_clean)
}
cleaned_dfs <- purrr::map(.x = countries, .f = clean_country_file)
clean_df <- bind_rows(cleaned_dfs)
exception_list <- c('Jawsh 685 Jason Derulo','IU (Prod.& Feat. SUGA of BTS)',
'MC MONG (Feat. Song Ga-in Chancellor)',"AKMU.How Can I Love The Heartbreak You're The One I Love",
'King & Prince', 'Benji & Fede', 'Tones And I', 'Lil Nas X Featuring Billy Ray Cyrus',
'Jesse & Joy And J Balvin', 'Lim Jae Hyun (prod. 2soo)', "Jang Hye Jin Yun Min Soo (VIBE)")
subfilter1 <- clean_df |>
filter(!(clean_df$Artist %in% exception_list)) |>
separate_longer_delim(Artist, " Featuring ") |>
separate_longer_delim(Artist, " & ") |>
separate_longer_delim(Artist, " X ") |>
separate_longer_delim(Artist, " x ") |>
separate_longer_delim(Artist, ", ") |>
separate_longer_delim(Artist, "  ") |>
separate_longer_delim(Artist, " And ") |>
separate_longer_delim(Artist, " Feat. ") |>
separate_longer_delim(Artist, " / ") |>
separate_longer_delim(Artist, " + ")
subfilter1 |> distinct(Artist)
subfilter2 <- clean_df |>
filter(Artist %in% exception_list) |>
filter(!(Artist %in% c('Jawsh 685 Jason Derulo','Jesse & Joy And J Balvin','MC MONG (Feat. Song Ga-in Chancellor)', "Jang Hye Jin Yun Min Soo (VIBE)"))) |>
separate_longer_delim(Artist, " Featuring ") |>
separate_longer_delim(Artist, "Feat. ") |>
mutate(Artist = str_remove(Artist, " (\\(prod. 2soo\\))|(\\.How Can I Love The Heartbreak You're The One I Love)|( \\(Prod\\.&)|(\\))|( \\()"))
subfilter2 |> distinct(Artist)
subfilter3 <- clean_df |>
filter(Artist == "Jawsh 685 Jason Derulo") |>
mutate(Artist = str_remove(Artist, " Jason Derulo"))
subfilter3 |> distinct(Artist)
subfilter4 <- clean_df |>
filter(Artist == "Jawsh 685 Jason Derulo") |>
mutate(Artist = str_remove(Artist, "Jawsh 685 "))
subfilter5 <- clean_df |>
filter(Artist == "Jesse & Joy And J Balvin") |>
separate_longer_delim(Artist, " And ")
subfilter6 <- clean_df |>
filter(Artist == 'MC MONG (Feat. Song Ga-in Chancellor)') |>
mutate(Artist = str_remove(Artist, " \\(Feat\\. Song Ga-in Chancellor\\)"))
subfilter6 |> distinct(Artist)
subfilter7 <- clean_df |>
filter(Artist == 'MC MONG (Feat. Song Ga-in Chancellor)') |>
mutate(Artist = str_extract(Artist, "Song Ga-in"))
subfilter7 |> distinct(Artist)
subfilter8 <- clean_df |>
filter(Artist == 'MC MONG (Feat. Song Ga-in Chancellor)') |>
mutate(Artist = str_extract(Artist, "Chancellor"))
subfilter8 |> distinct(Artist)
subfilter9 <- clean_df |>
filter(Artist == "Jang Hye Jin Yun Min Soo (VIBE)") |>
mutate(Artist = str_extract(Artist, "Jang Hye Jin"))
subfilter10 <- clean_df |>
filter(Artist == "Jang Hye Jin Yun Min Soo (VIBE)") |>
mutate(Artist = str_extract(Artist, "Yun Min Soo"))
cleaner_df <- bind_rows(subfilter1, subfilter2, subfilter3, subfilter4, subfilter5, subfilter6, subfilter7, subfilter8, subfilter9, subfilter10)
get_origin <- function(artistName){
req <- request("https://musicbrainz.org/ws/2/artist/?")
Sys.sleep(1)
req <- req |>
req_url_query(
"query"  = artistName,
"fmt" = "json"
)
resp <- req_perform(req)
df <- resp |> resp_body_json(simplifyVector = TRUE)
retVal <- tibble(Artist = artistName, Nationality = df$artists$country[1])
return(retVal)
}
unique_artist_list <- (cleaner_df |> distinct(Artist))$Artist
nationality_list <- purrr::map(.x = unique_artist_list, .f = get_origin, .progress = T)
nationality_df <- nationality_list |> bind_rows()
manual1 <- tribble(~Artist, ~Nationality,
"ROSALIA", "ES",
"Tatool", "AR",
"The Bugler", "JM",
"The Beatles", "GB",
"Jack Johnson", "US",
"Orquesta Filarmonica de Gran Canaria", "ES",
"RESISTIRE MEXICO", "MX",
"Depedro", "ES",
"Ismel Serriano", "ES",
"Nina de Juan", "ES",
"Santi Blames", "ES",
"Agoney", "ES",
"The Harmony Group","US",
"Calvin Harris", "GB",
"Rag'n'Bone Man","GB",
"Live Lounge Allstars","GB",
"Et demain ? Le Collectif","FR",
"Joel Corry MNEK","UG",
"Eno", "TR",
"Kalazh44","DE",
"Joker Bra","DE",
"Rymez","ZW",
"Loredana Zuna","CH",
"Takagi","JP"
)
manual2 <- tibble(
Artist = c("Johnny's WEST", "Kazuya Kamenashi", "Twenty Twenty", "Jang Hye Jin", "Yun Min Soo", "Paul Kim", "Cho Jung Seok", "BLOO", "Horacio Palencia", "Conkarah", "Song Ga-in", "Jesse & Joy"),
Nationality = c("JP", "JP", "GB", "KR", "KR","KR", "KR", "KR", "MX", "JM", "KR", "MX")
)
#binds the initial list (except NAs) with manual inputs
ultimate_nationality <- bind_rows(nationality_df |> filter(!is.na(Nationality)), manual1, manual2)
#joins the tables to get final output, renames rank column
cleanest_df <- cleaner_df |> left_join(ultimate_nationality, join_by(Artist == Artist))
cleanest_df <- cleanest_df |> rename(Rank = 1)
glimpse(cleanest_df)
cleanest_df
cleanest_df |> select(Nationality)
cleanest_df |> distinct(Nationality)
cleanest_df |> distinct(Nationality) |> print(n = 36)
glimpse(cleanest_df)
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("gt")
install.packages("tidyverse")
install.packages("stargazer")
install.packages("ggtext")
library(ggtext)
library(tidyverse)
library(readxl)
library(gt)
library(ggplot2)
library(stargazer)
#may need to change the file path if you downloaded this code
file_path <- file.path("C:/Users/aidan/Documents/Data Final Project")
setwd(file_path)
#reading in data and adjusting source to match Nationality
data <- read_xlsx("international_billboard.xlsx")
data2 <- data |>
mutate(source = case_when(
source == "ARG"~"AR",
source == "AUS"~"AU",
source == "CAN"~"CA",
source == "ESP"~"ES",
source == "EUR"~"EUROPE",
source == "FRA"~"FR",
source == "GBP"~"GB",
source == "GER"~"DE",
source == "ITA"~"IT",
source == "JPN"~"JP",
source == "KOR"~"KR",
source == "MEX"~"MX",
source == "SUI"~"CH"
))
data2 <- data2 |> group_by(TrackName, Date, source) |>
mutate(number_of_artists = n()) |>
ungroup()
data3 <- data2 |>
mutate(foreign = (source != Nationality)) |>
filter(source != "EUROPE")
# "Are songs produced in a country more popular in that country?"
model1 <- lm(Rank ~ foreign, data = data3, weights = 1 / number_of_artists)
# "Are songs produced in a country more popular in that country?"
model1 <- lm(Rank ~ foreign, data = data3, weights = 1 / number_of_artists)
summary(model1)
summary(model1)
stargazer(model1, type = "html", digits = 2, title = "Linear Regression of Billboard Rank on International Success of Foreign Artists",
dep.var.labels=c("Billboard Rank"),
covariate.labels=c("Foreign Artist (Binary)", "Intercept")
, out = 'linRegOnForeign.htm')
#Spanish Speaking
data4 <- data2 |>
filter(source %in% c("AR", "ES", "MX")) |>
mutate(speaks_spanish = (Nationality %in% c("AR", "ES", "MX", "PR", "PA", "CO", "DO", "VE")))
data4 |> select(Nationality, speaks_spanish, source)
model2 <- lm(Rank ~ speaks_spanish, data = data4, weights = 1 / number_of_artists)
model2
stargazer(model2, type = "html", digits = 2, title = "Linear Regression of Billboard Rank on Shared Language between Artists and Country (Spanish)",
dep.var.labels=c("Billboard Rank"),
covariate.labels=c("Spanish-Speaking Artist (Binary)", "Intercept")
, out = 'linRegOnSpanish.htm')
#English Speaking But Not American
data5 <- data3 |>
mutate(
speaks_english_not_am = (Nationality %in% c("CA", "GB", "PR", "JM", "GY", "NZ", "AU", "ZA", "NG", "UG")),
)
model3 <- lm(Rank ~ speaks_english_not_am, data = data5, weights = 1 / number_of_artists)
summary(model3)
stargazer(model3, type = "html", digits = 2, title = "Linear Regression of Billboard Rank on Shared Language between Artists and Country (English, Excluding US)",
dep.var.labels=c("Billboard Rank"),
covariate.labels=c("English-Speaking Artist (Binary)", "Intercept")
, out = 'linRegOnEnglish.htm')
data6 <- data2 |>
filter(source %in% c("ES", "GB", "FR", "BE", "DE", "RO", "CH", "IT", "NL")) |>
mutate(asian = Nationality %in% c("PH", "BD", "JP", "KR"))
data6 <- data2 |>
filter(source %in% c("ES", "GB", "FR", "BE", "DE", "RO", "CH", "IT", "NL")) |>
mutate(asian = Nationality %in% c("PH", "BD", "JP", "KR"))
model4 <- lm(Rank ~ asian, data = data6, weights = 1 / number_of_artists)
stargazer(model4, type = "html", digits = 2, title = "Linear Regression on Asianness to European Billboard Rank",
dep.var.labels=c("Billboard Rank"),
covariate.labels=c("Asian Artist (Binary)", "Intercept")
, out = 'linRegOnAsian.htm')
# "Are songs produced in America more popular?"
data7 <- data2 |>
filter(source != "EUROPE") |>
mutate(american = Nationality == "US")
# "Are songs produced in America more popular?"
data7 <- data2 |>
filter(source != "EUROPE") |>
mutate(american = Nationality == "US")
model5 <- lm(Rank ~ american, data = data7, weights = 1 / number_of_artists)
model5
stargazer(model5, type = "html", digits = 2, title = "Linear Regression of Billboard Rank on International Success of American Artists",
dep.var.labels=c("Billboard Rank"),
covariate.labels=c("American Artist (Binary)", "Intercept")
, out = 'linRegOnAmerican.htm')
country_codes <- c("AR", "PR", "US", "CA", "PA", "ES", "CO", "GB", "AU", "JM",
"GY", "NZ", "BR", "DO", "VE", "MX", "DE", "PH", "BD", "ZA",
"NG", "FR", "BE", "DZ", "UG", "TR", "JP", "RO", "ZW", "CH",
"IT", "NL", "IN", "KR", "NO", "SE")
country_names <- c("Argentina", "Puerto Rico", "United States", "Canada", "Panama",
"Spain", "Colombia", "United Kingdom", "Australia", "Jamaica",
"Guyana", "New Zealand", "Brazil", "Dominican Republic",
"Venezuela", "Mexico", "Germany", "Philippines", "Bangladesh",
"South Africa", "Nigeria", "France", "Belgium", "Algeria",
"Uganda", "Turkey", "Japan", "Romania", "Zimbabwe", "Switzerland",
"Italy", "Netherlands", "India", "South Korea", "Norway", "Sweden")
country_dict <- setNames(country_names, country_codes)
data8 <- data3 |> mutate(
Rank = 100 - Rank,
source = country_dict[source],
Nationality = country_dict[source]
)
ggplot(data8, aes(fill = foreign, y = Rank, x = reorder(source, foreign*Rank))) +
geom_bar(position="fill", stat="identity") +
labs(
title = "Proportion of Foreign Artists in Country's Top 100 Billboards",
subtitle = "Rank-Adjusted",
x = "", y = "Percent of Billboard"
) + scale_fill_discrete(name = "Foreign Artist") +
scale_fill_manual(values = c('pink', '#748E54')) + theme_light() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggsave("rank-adjusted-histogram.png")
data9 <- data3 |> mutate(
Rank = 1,
source = country_dict[source],
Nationality = country_dict[source]
)
ggplot(data9, aes(fill = foreign, y = Rank, x = reorder(source, foreign))) +
geom_bar(position="fill", stat="identity") +
labs(
title = "Proportion of Foreign Artists in Country's Top 100 Billboards",
subtitle = "Not Rank-Adjusted",
x = "", y = "Percent of Billboard"
) + scale_fill_discrete(name = "Foreign Artist") +
scale_fill_manual(values = c('pink', '#748E54')) + theme_light() +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))
ggsave("not-rank-adjusted-histogram.png")
data10 <- data3 |> mutate(
source = country_dict[source],
Nationality = country_dict[source]
)
table <- data10 |>
group_by(source) |>
summarize(
NumberOfArtists = n(),
NumberOfForeignArtists = sum(foreign),
foreignProp = round(NumberOfForeignArtists / NumberOfArtists, 3)
) |> arrange(desc(foreignProp))
table |> gt() |>
tab_header(
title = md("**Summary Statistics for Top 100 Billboards**"),
subtitle = md("*Countries ordered in descending foreign representation*")
) |>   cols_label(
source = md("**Country**"),
NumberOfArtists = md("**# of Artists**"),
NumberOfForeignArtists = md("**# of Foreign Artists**"),
foreignProp = md("**Ratio**")
) |> gtsave("sum_stats.png")
table |> gt() |>
tab_header(
title = md("**Summary Statistics for Top 100 Billboards**"),
subtitle = md("*Countries ordered in descending foreign representation*")
) |>   cols_label(
source = md("**Country**"),
NumberOfArtists = md("**# of Artists**"),
NumberOfForeignArtists = md("**# of Foreign Artists**"),
foreignProp = md("**Ratio**")
)
data3 |>
filter(foreign) |>
group_by(source) |>
mutate(foreign_avg = mean(Rank)) |> distinct(foreign_avg)
data3 |>
filter(!foreign) |>
group_by(source) |>
mutate(foreign_avg = mean(Rank)) |> distinct(foreign_avg)
data11 <- data3 |>
mutate(
source = country_dict[source],
Nationality = country_dict[source]
) |>
group_by(source) |>
mutate(
rank_avg = mean(Rank),
total_artists = n()) |>
ungroup() |>
filter(foreign) |>
group_by(source) |>
mutate(
foreign_avg = mean(Rank),
foreign_artists = n(),
national_avg = ((rank_avg * total_artists) - (foreign_avg * foreign_artists)) / (total_artists - foreign_artists)
) |>
ungroup() |>
arrange(foreign_avg)
data11 |> distinct(foreign_avg)
ggplot(data11 |> mutate(source = fct_reorder(source, desc(national_avg)))) +
geom_segment( aes(x=source, xend=source, y=national_avg, yend=foreign_avg), color="grey") +
geom_point( aes(x=source, y=national_avg), color="pink", size=3) +
geom_point( aes(x=source, y=foreign_avg), color="lightgreen", size=3) +
coord_flip() +
labs(
title = "Average <span style='color: green;'>Foreign</span> and <span style='color: pink;'>National</span> Billboard Rank",
x = "", y = "Average Billboard Rank"
) + theme(plot.title = element_markdown(hjust = 0.5,face="bold", size = 17))
ggsave("avgs_lollipop.png")
data10 |> filter(source == "Japan") |> distinct(Date)
